server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2 default_server;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_certificate     /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

  # IMPORTANT: This is only for dev purposes and should be removed
  # Requests from within Docker container need to be proxied like this to avoid CORS errors
  location /ubi-api-rest/ {
    proxy_pass http://msa-api:8480/ubi-api-rest/;
  }

  location /ubi-api-ping/ {
    proxy_pass http://msa-api:8480/;
  }

  location / {
    proxy_pass http://msa_ui:8080/;
  }

  location /cloudclapp {
    resolver 127.0.0.11;
    set $upstream_cloudclapp "cloudclapp:8080";
    rewrite  ^/cloudclapp(/.*) $1 break;
    proxy_pass http://$upstream_cloudclapp$uri;
  }

  location /msa_version {
    root /app;
    index index.html;
  }

  location /swagger {
      root /app;
      absolute_redirect off;
      index index.html;
  }

  location /msa_sdk {
      root /app;
      absolute_redirect off;
      index index.html;
  }

  # For internal use only.
  # Remove this when you create a production build
  location /django {
    resolver 127.0.0.11;
    set $upstream_ai_ml "msa-ai-ml";
    proxy_pass http://$upstream_ai_ml:8000/django;
  }

  location /ubi-ai-ml-rest {
    resolver 127.0.0.11;
    set $upstream_ai_ml "msa-ai-ml";
    rewrite  ^/ubi-ai-ml-rest/(.*) /$1 break;
    proxy_pass http://$upstream_ai_ml:8000;
  }

  location /kibana {
    resolver 127.0.0.11;
    set $upstream_kibana "msa-kibana:5601";
    proxy_pass http://$upstream_kibana;
  }

}
